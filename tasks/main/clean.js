const fse = require('fs-extra');
const uniq = require('lodash/uniq');
const rd = require('rd');

const pathUtil = require('../../util/path');
const logger = require('../../util/logger');
const share = require('../../share');
const pathInfo = require('../../data/path_info');

const makeRegExp = require('../clean/reg_exp');
const extractHashCodes = require('../clean/hash_codes');
const extractChunkHashCodes = require('../clean/chunk_hash_codes');

/**
 * Register `clean` task.
 *
 * @param gulp
 */
module.exports = gulp => {
  // Here should be named function, otherwise in the command line will show anonymous function.
  const clean = cb => {
    // All hash codes.
    const hashCodes = uniq(extractHashCodes());
    let deletedFilesCount = 0;

    rd.eachFileFilterSync(`${pathInfo.projectRoot}/dist`, file => {
      // Only clean js and css files.
      if (file.slice(-3) !== '.js' && file.slice(-4) !== '.css') {
        return;
      }

      /**
       * File path.
       *
       * @example
       *
       * ```
       * index.js
       * inner/index.js
       * ```
       */
      const filePath = pathUtil.replaceBackSlash(file);
      const lastSlashIndex = filePath.lastIndexOf('/');
      const fileName = lastSlashIndex === -1 ? filePath : filePath.slice(lastSlashIndex + 1);

      // Match `js|css` file.
      const regExp = makeRegExp.matchFileName(share.hashDigestLength);
      const result = regExp.exec(fileName);
      if (!result) {
        return;
      }

      // Not in use, remove it.
      if (hashCodes.indexOf(result[1]) < 0) {
        fse.removeSync(file);
        deletedFilesCount < 1 && logger.info('');
        logger.info(`Deleted file: ${file}`);
        deletedFilesCount += 1;
      }
    });

    logger.success(`
  ${deletedFilesCount} redundant files are deleted successfully.    
    `);

    cb();
  };

  /**
   * Clean js chunks generated by `require.ensure(), import()`.
   *
   * Normal js file: ([0-9a-f]{32}).js
   * Chunk js file: ([0-9]{1,}).([0-9a-f]{32}).js
   *
   * And in normal file, load chunk file as follows:
   *     script.src = __webpack_require__.p + "" + chunkId + "." + {"0":"7b7c4210539c2c41354207f419ec0249","1":"721ea8e8a5ae693fd7ed70b501c7d28c","2":"e2025f09faac9dd460cbac6913cfbda6"}[chunkId] + ".js";
   *
   * @param cb
   */
  const cleanChunks = cb => {
    // All hash codes.
    const hashCodes = uniq(extractChunkHashCodes());
    const testRegExp = makeRegExp.matchJsChunkFileName(share.hashDigestLength);
    let deletedFilesCount = 0;

    rd.eachFileFilterSync(`${pathInfo.projectRoot}/dist`, file => {
      // File path.
      const filePath = pathUtil.replaceBackSlash(file);
      if (!testRegExp.test(filePath)) {
        return;
      }

      const lastSlashIndex = filePath.lastIndexOf('/');
      const fileName = lastSlashIndex === -1 ? filePath : filePath.slice(lastSlashIndex + 1);

      const hash = fileName.split('.')[1];

      // not in use, remove it
      if (hashCodes.indexOf(hash) < 0) {
        fse.removeSync(file);
        deletedFilesCount < 1 && logger.info('');
        logger.info(`Deleted js chunk file: ${file}`);
        deletedFilesCount += 1;
      }
    });

    logger.success(`
  ${deletedFilesCount} redundant js chunk files are deleted successfully.
    `);

    cb();
  };

  // register clean task
  gulp.task('clean', gulp.series('pre_archive', clean, cleanChunks));
};
